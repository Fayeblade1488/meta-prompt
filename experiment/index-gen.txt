
# classifier
## request
```python
endpoint = "https://api.jina.ai/v1/classify" # The base URL of the API endpoint, required, no default value.
headers = {
    "Content-Type": "application/json", # Indicates the media type of the resource, required, default value: "application/json".
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2" # The credentials to authenticate a user agent with a server, required, no default value.
} 
data = {
    "model": "jina-embeddings-v3", # The model to be used for classification, required, no default value, possible values: model names provided by the API.
    "input": [
        "Calculate the compound interest on a principal of $10,000 invested for 5 years at an annual rate of 5%, compounded quarterly.",
        "分析使用CRISPR基因编辑技术在人类胚胎中的伦理影响。考虑潜在的医疗益处和长期社会后果。",
        "AIが自意識を持つディストピアの未来を舞台にした短編小説を書いてください。人間とAIの関係や意識の本質をテーマに探求してください。",
        "Erklären Sie die Unterschiede zwischen Merge-Sort und Quicksort-Algorithmen in Bezug auf Zeitkomplexität, Platzkomplexität und Leistung in der Praxis.",
        "Write a poem about the beauty of nature and its healing power on the human soul.",
        "Translate the following sentence into French: The quick brown fox jumps over the lazy dog."
    ], # The input data to classify, required, no default value.
    "labels": [
        "Simple task",
        "Complex reasoning",
        "Creative writing"
    ] # The candidate labels for classification, optional, default value: [], possible values: any string representing a label.
}
response = requests.post(endpoint, json=data, headers=headers) # Sends a POST request to the specified url.
```

## response
```json
{
  "usage": {
    "total_tokens": 196 # The total number of tokens/predictions made by the model in this request.
  },
  "data": [
    {
      "object": "classification", # Indicates the type of object, in this case, a classification.
      "index": 0, # The index of the input in the original array.
      "prediction": "Simple task", # The predicted label for the input.
      "score": 0.35216382145881653, # The confidence score of the prediction.
      "predictions": [
        {
          "label": "Simple task", # A possible label.
          "score": 0.35216382145881653 # The score for this label.
        },
        {
          "label": "Complex reasoning",
          "score": 0.3412695527076721
        },
        {
          "label": "Creative writing",
          "score": 0.3065665662288666
        }
      ] # An array of possible labels and their scores.
    },
    ... # Similar structure for other inputs.
  ]
}
```
# embeddings
## request
```python
endpoint = "https://api.jina.ai/v1/embeddings"  # The endpoint URL for embedding requests, required
headers = {
    "Content-Type": "application/json",  # Indicates the media type of the resource, required
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2"  # Token for authentication, required
}
data = {
    "model": "jina-embeddings-v3",  # Specifies the embedding model to use, required
    "task": "text-matching",  # Defines the task for which the embeddings will be optimized, required. Possible values: "text-matching", "text-classification", "text-generation"
    "dimensions": 1024,  # Sets the dimensionality of the resulting embeddings, required. Must be a positive integer.
    "late_chunking": False,  # Enables or disables the late chunking feature, optional, default is False
    "embedding_type": "float",  # Defines the data type of the returned embeddings, optional, default is "float". Possible values: "float", "binary", "base64"
    "input": [  # The input texts to be embedded, required. Must be a list of strings.
        "Organic skincare for sensitive skin with aloe vera and chamomile: Imagine the soothing embrace of nature with our organic skincare range, crafted specifically for sensitive skin. Infused with the calming properties of aloe vera and chamomile, each product provides gentle nourishment and protection. Say goodbye to irritation and hello to a glowing, healthy complexion.",
        "Bio-Hautpflege für empfindliche Haut mit Aloe Vera und Kamille: Erleben Sie die wohltuende Wirkung unserer Bio-Hautpflege, speziell für empfindliche Haut entwickelt. Mit den beruhigenden Eigenschaften von Aloe Vera und Kamille pflegen und schützen unsere Produkte Ihre Haut auf natürliche Weise. Verabschieden Sie sich von Hautirritationen und genießen Sie einen strahlenden Teint.",
        "Cuidado de la piel orgánico para piel sensible con aloe vera y manzanilla: Descubre el poder de la naturaleza con nuestra línea de cuidado de la piel orgánico, diseñada especialmente para pieles sensibles. Enriquecidos con aloe vera y manzanilla, estos productos ofrecen una hidratación y protección suave. Despídete de las irritaciones y saluda a una piel radiante y saludable.",
        "针对敏感肌专门设计的天然有机护肤产品：体验由芦荟和洋甘菊提取物带来的自然呵护。我们的护肤产品特别为敏感肌设计，温和滋润，保护您的肌肤不受刺激。让您的肌肤告别不适，迎来健康光彩。",
        "新しいメイクのトレンドは鮮やかな色と革新的な技術に焦点を当てています: 今シーズンのメイクアップトレンドは、大胆な色彩と革新的な技術に注目しています。ネオンアイライナーからホログラフィックハイライターまで、クリエイティビティを解き放ち、毎回ユニークなルックを演出しましょう。"
    ]
}
response = requests.post(endpoint, json=data, headers=headers)  # Sends request to the endpoint, expects JSON response
```
## response
```json
{
  "model": "jina-embeddings-v3",  # The model used for generating embeddings
  "object": "list",  # Indicates the type of response object
  "usage": {
    "total_tokens": 410,  # Total number of tokens processed
    "prompt_tokens": 410  # Tokens generated from the input prompts
  },
  "data": [
    {
      "object": "embedding",  # Type of object, here representing an embedding
      "index": 0,  # Index of the input in the request array
      "embedding": [0.0086874915, 0.10442207, 0.049341407, -0.09133959, 0.035539553, ...]  # The embedding vector, truncated for brevity
    },
    {
      "object": "embedding",
      "index": 1,
      "embedding": [-0.017281326, 0.11304399, 0.026589902, -0.05840733, 0.038798418, ...]
    },
    {
      "object": "embedding",
      "index": 2,
      "embedding": [-0.049376693, 0.11805992, 0.024820223, -0.07981897, 0.010398907, ...]
    },
    {
      "object": "embedding",
      "index": 3,
      "embedding": [0.059242655, 0.043504987, 0.021679124, -0.058159206, 0.107634515, ...]
    },
    {
      "object": "embedding",
      "index": 4,
      "embedding": [0.16137746, 0.02618378, -0.016751772, -0.024613041, 0.037344795, ...]
    }
  ]
}
```
# g.reader
## request
```python
endpoint = "https://g.jina.ai"  # The API endpoint for grounding. Required. No default value.
query = "Jina AI was founded in 2020 in Berlin."  # The text to be fact-checked. Required. No default value.
headers = {
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2",  # The API key for authorization. Required. No default value.
    "Accept": "application/json"  # The format of the response. Required. Default: application/json. Possible values: application/json.
}
response = requests.get(endpoint, params={"q": query}, headers=headers)  # Sends a GET request. Response is expected in JSON format.
```

## response
```json
{
  "code": 200,  # HTTP status code indicating success. Required. Possible values: 200 OK, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Internal Server Error.
  "status": 20000,  # Custom status code indicating the specific outcome of the request. Required. Possible values vary depending on the API's own documentation.
  "data": {
    "factuality": 1,  # The factual score of the provided text. Required. Possible values range from 0 to 1 where 1 indicates high factual accuracy.
    "result": true,  # The boolean result of the fact-checking. Required. Possible values: true (statement is factual), false (statement is not factual).
    "reason": "The statement that Jina AI was founded in 2020 in Berlin is supported by multiple references. Several sources confirm that Jina AI was established in February 2020 and is based in Berlin, Germany. The references provide consistent information regarding both the founding year and the location, indicating that the statement is accurate and well-supported by credible sources.",  # Explanation for the factuality assessment. Required. No default value.
    "references": [
      {
        "url": "https://www.cbinsights.com/company/jina-ai",  # URL of a supporting reference. Required. No default value.
        "keyQuote": "It was founded in 2020 and is based in Berlin, Germany.",  # A quote from the reference supporting the fact check. Required. No default value.
        "isSupportive": true  # Indicates if the reference supports the fact check. Required. Possible values: true, false.
      },
      ...  # Other references follow the same format.
    ],
    "usage": {
      "tokens": 8265  # The number of tokens processed for the request. Required. No default value.
    }
  }
}
```
# r.reader
## request
```python
endpoint = "https://r.jina.ai"  # Required. The base URL of the Jina Reader API.
url = "https://example.com/"  # Required. The target URL to fetch and process.
headers = {
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2"  # Optional. For authenticated requests.
}  # Required if authentication is needed. Contains API credentials.
params = {
    "stream": False,  # Optional. Default is False. When True, uses stream mode for large pages.
    "locale": "en-US",  # Optional. Default is "en-US". Sets the browser locale.
    "bypass_cache": False,  # Optional. Default is False. When True, bypasses the internal cache.
    "gather_links": False,  # Optional. Default is False. When True, gathers all links at the page end.
    "gather_images": False,  # Optional. Default is False. When True, gathers all images at the page end.
    "use_post": False,  # Optional. Default is False. When True, uses POST method for the request.
    "json_response": True,  # Optional. Default is False. When True, returns the response in JSON format.
    "forward_cookie": False,  # Optional. Default is False. When True, forwards custom cookies.
    "iframe": False,  # Optional. Default is False. Includes the content of iframes.
    "shadow_dom": False,  # Optional. Default is False. Includes the content of shadow DOM.
}  # Optional. Contains query parameters to customize the API request.

response = requests.get(endpoint, params=params, headers=headers)  # Sends a GET request with optional parameters and headers.
```
## response
```python
{
    "status": "200 OK",  # Indicates the HTTP status code of the response.
    "time_taken": "3.3 s",  # Time taken to process the request.
    "title": "Example Domain",  # The title of the target webpage.
    "url_source": "https://example.com/",  # The original URL requested.
    "markdown_content": "This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\n\n[More information...](https://www.iana.org/domains/example)"  # The main content extracted from the target URL, formatted in Markdown.
}
```
Note: The "..." is a placeholder for the actual code or data element and is not to be used as a literal in the implementation.
# reranker
## request
```python
endpoint = "https://api.jina.ai/v1/rerank"  # The endpoint URL to POST the rerank request, required, no default value.
headers = {
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2",  # The authorization token to access the API, required, no default value.
    "Content-Type": "application/json"  # Indicates the media type of the resource, required, default value: "application/json".
}
payload = {
    "model": "jina-reranker-v2-base-multilingual",  # The model used for re-ranking, required, no default value.
    "query": "Organic skincare products for sensitive skin",  # The query text based on which documents are re-ranked, required, no default value.
    "top_n": 3,  # The number of most relevant documents to return for the query, optional, default value: 5, maximum value: 10.
    "documents": [
        # List of candidate documents provided for re-ranking, required, no default value.
        "Organic skincare for sensitive skin with aloe vera and chamomile: Imagine the soothing embrace of nature with our organic skincare range, crafted specifically for sensitive skin. Infused with the calming properties of aloe vera and chamomile, each product provides gentle nourishment and protection. Say goodbye to irritation and hello to a glowing, healthy complexion.",
        # Additional documents...
    ]
}
response = requests.post(endpoint, headers=headers, json=payload)  # Sends a POST request to the specified endpoint, required, no default value.
```

## response
```json
{
  "model": "jina-reranker-v2-base-multilingual",  # The model used for re-ranking, as specified in the request.
  "usage": {
    "total_tokens": 815  # The total number of tokens processed in the re-ranking task.
  },
  "results": [
    {
      "index": 0,  # The original index of the document in the provided list of documents.
      "document": {
        "text": "Organic skincare for sensitive skin with aloe vera and chamomile: Imagine the soothing embrace of nature with our organic skincare range, crafted specifically for sensitive skin. Infused with the calming properties of aloe vera and chamomile, each product provides gentle nourishment and protection. Say goodbye to irritation and hello to a glowing, healthy complexion."
        # The actual text content of the document.
      },
      "relevance_score": 0.8783142566680908  # The relevance score assigned to the document based on the query.
    },
    # Additional results...
  ]
}
```
# s.reader
## request
```python
endpoint = "https://s.jina.ai"  # Required. No default value.
query = "When was Jina AI founded?"  # Required. The search query string. No default value.
headers = {
    "Authorization": "Bearer jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2"  # Required for authorization. No default value.
}
params = {
    "stream": False,  # Optional. Default value: False. Possible values: True, False. 
    "locale": "en-US",  # Optional. Default value: "en-US". Possible values: Any valid IETF language tag.
    "bypass_cache": False,  # Optional. Default value: False. Possible values: True, False.
    "proxy": "",  # Optional. Default value: "". Specify the proxy server address, e.g., "http://your_proxy_server.com".
    "forward_cookie": False,  # Optional. Default value: False. Possible values: True, False. 
    "json_response": False,  # Optional. Default value: False. Possible values: True, False. Returns response in JSON format.
    "gather_all_links": False,  # Optional. Default value: False. Possible values: True, False. 
    "gather_all_images": False,  # Optional. Default value: False. Possible values: True, False.
    "image_caption": False,  # Optional. Default value: False. Possible values: True, False. Adds captions to all images.
    "use_post_method": False  # Optional. Default value: False. Possible values: True, False. Uses POST instead of GET.
}
response = requests.get(endpoint, params=params, headers=headers)  # Sends a GET request to the specified endpoint with query parameters and authorization headers.
```
## response
```python
{
    "status": "200 OK",  # The HTTP status code of the response.
    "response_time": 3.3,  # Time in seconds it took to receive the response.
    "title": "Example Domain",  # Title of the page or document.
    "url_source": "https://example.com/",  # The URL source of the retrieved document.
    "markdown_content": "This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\n\n[More information...](https://www.iana.org/domains/example)"  # The main content of the document, formatted in Markdown.
}
```
# segmenter
## request
```python
endpoint = "https://segment.jina.ai/" # base URL for the API
payload = {
  "content": "Jina AI: Your Search Foundation, Supercharged! 🚀\nIhrer Suchgrundlage, aufgeladen! 🚀\n您的搜索底座，从此不同！🚀\n検索ベース,もう二度と同じことはありません！🚀", # input text to process, required, no default
  "return_tokens": True, # whether to return tokens in the response, optional, default False
  "return_chunks": True, # whether to return chunks in the response, optional, default False
  "max_chunk_length": 1000, # maximum length of each chunk, optional, default 500, min 500, max 2000
  "api_key": "jina_ad42b3eb889c44db9f2190ec851c68c9o5LJmW9Glf5wP-V3JOweluX9WAE2", # API key for higher rate limit, optional, no default
  "return_first_n_tokens": {"enabled": False, "value": 5}, # optional, default {"enabled": False, "value": 5}, returns the first N tokens; "enabled" (True, False), "value" (int, 1 to 100)
  "return_last_n_tokens": {"enabled": False, "value": 5}, # optional, default {"enabled": False, "value": 5}, returns the last N tokens; "enabled" (True, False), "value" (int, 1 to 100)
  "tokenizer": "cl100k_base" # tokenizer to use, required, default "cl100k_base"; possible values: "cl100k_base", "cl100k_large", "othertokenizer1", "othertokenizer2", ...
}
response = requests.post(endpoint, json=payload) # executes POST request with provided payload
```
## response
```json
{
  "num_tokens": 78, # total number of tokens analyzed
  "tokenizer": "cl100k_base", # tokenizer used for the task
  "usage": {
    "tokens": 0 # number of tokens used from your quota
  },
  "num_chunks": 4, # number of generated chunks based on "max_chunk_length"
  "chunk_positions": [
    [3, 55],
    [55, 93],
    [93, 110],
    [110, 135]
  ], # start and end positions of each chunk in the text
  "tokens": [
    [
      [["Jina", [41]], [" AI", [15592]], [":", [25]], [" Your", [4718]], [" Search", [7694]], [" Foundation", [5114]], ["!", [0]], [" 🚀", [248, 222]]],
      [["Ihrer", [4171]], [" Suchgrundlage", [15483]], [",", [11]], [" aufgeladen", [7367]], ["!", [0]], [" 🚀", [248, 222]]],
      [["您的", [88126]], [" 搜索底座", [80073]], ["，", [3922]], [" 从此不同", [46281]], ["！", [6447]], [" 🚀", [9468, 248, 222]]],
      [["検索ベース", [162, 97, 250]], [",", [11]], [" もう二度と同じことはありません", [42016]], ["！", [6447]], [" 🚀", [9468, 248, 222]]]
    ]
  ], # tokens and corresponding token IDs for each chunk
  "chunks": [
    "Jina AI: Your Search Foundation, Supercharged! 🚀\n  ",
    "Ihrer Suchgrundlage, aufgeladen! 🚀\n  ",
    "您的搜索底座，从此不同！🚀\n  ",
    "検索ベース,もう二度と同じことはありません！🚀\n"
  ] # generated text chunks based on "return_chunks" flag
}
```